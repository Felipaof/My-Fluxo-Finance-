let todasTransacoes = [];
let transacoesFiltradas = [];
let categorias = [];
let editandoTransacao = null;

document.addEventListener('DOMContentLoaded', async () => {
  console.log('üìù Inicializando p√°gina de transa√ß√µes...');
  
  // Obter usu√°rio atual
  const usuarioId = getCurrentUser()?.id || 1;
  
  try {
    // Carregar dados necess√°rios
    await Promise.all([
      carregarCategorias(),
      carregarTransacoes(usuarioId)
    ]);
    
    // Configurar eventos
    setupEventListeners();
    
    console.log('‚úÖ P√°gina de transa√ß√µes carregada!');
  } catch (error) {
    console.error('‚ùå Erro ao carregar p√°gina:', error);
    showNotification('Erro ao carregar dados', 'error');
  }
});

// ===== CARREGAMENTO DE DADOS =====

async function carregarCategorias() {
  try {
    console.log('üìÇ Carregando categorias...');
    const response = await api.getCategorias();
    
    // Verificar se a resposta √© um array
    if (Array.isArray(response)) {
      categorias = response;
    } else if (response && Array.isArray(response.categorias)) {
      categorias = response.categorias;
    } else {
      console.error('Formato de resposta inv√°lido para categorias:', response);
      categorias = [];
      throw new Error('Formato de resposta inv√°lido para categorias');
    }
    
    console.log('Categorias carregadas:', categorias);
    
    // Preencher selects
    const selects = ['filter-categoria', 'categoria_id'];
    selects.forEach(selectId => {
      const select = document.getElementById(selectId);
      if (select) {
        // Manter a primeira op√ß√£o (placeholder)
        while (select.children.length > 1) {
          select.removeChild(select.lastChild);
        }
        
        // Verificar se categorias √© um array antes de usar forEach
        if (Array.isArray(categorias)) {
          categorias.forEach(categoria => {
            const option = document.createElement('option');
            option.value = categoria.id;
            option.textContent = categoria.nome;
            select.appendChild(option);
          });
        }
      }
    });
    
    console.log('‚úÖ Categorias carregadas!');
  } catch (error) {
    console.error('‚ùå Erro ao carregar categorias:', error);
    showNotification('Erro ao carregar categorias: ' + error.message, 'error');
    categorias = []; // Garantir que seja um array vazio
  }
}

async function carregarTransacoes(usuarioId) {
  try {
    console.log('üí≥ Carregando transa√ß√µes...');
    showLoading(true);
    
    todasTransacoes = await api.getTransacoes(usuarioId);
    transacoesFiltradas = [...todasTransacoes];
    
    atualizarInterface();
    
    console.log('‚úÖ Transa√ß√µes carregadas!');
  } catch (error) {
    console.error('‚ùå Erro ao carregar transa√ß√µes:', error);
    showNotification('Erro ao carregar transa√ß√µes', 'error');
  } finally {
    showLoading(false);
  }
}

// ===== INTERFACE =====

function atualizarInterface() {
  atualizarResumo();
  renderizarTransacoes();
}

function atualizarResumo() {
  let totalReceitas = 0;
  let totalDespesas = 0;
  let countReceitas = 0;
  let countDespesas = 0;
  
  transacoesFiltradas.forEach(transacao => {
    const valor = parseFloat(transacao.valor) || 0;
    if (transacao.tipo_entrada === 'entrada') {
      totalReceitas += valor;
      countReceitas++;
    } else {
      totalDespesas += valor;
      countDespesas++;
    }
  });
  
  const saldo = totalReceitas - totalDespesas;
  const totalTransacoes = transacoesFiltradas.length;
  
  // Atualizar elementos
  updateElement('total-receitas-periodo', formatCurrency(totalReceitas));
  updateElement('total-despesas-periodo', formatCurrency(totalDespesas));
  updateElement('saldo-periodo', formatCurrency(saldo));
  updateElement('count-receitas', `${countReceitas} transa√ß√£o${countReceitas !== 1 ? '√µes' : ''}`);
  updateElement('count-despesas', `${countDespesas} transa√ß√£o${countDespesas !== 1 ? '√µes' : ''}`);
  updateElement('count-total', `${totalTransacoes} transa√ß√£o${totalTransacoes !== 1 ? '√µes' : ''}`);
}

function renderizarTransacoes() {
  const container = document.getElementById('transactions-list');
  if (!container) return;
  
  if (transacoesFiltradas.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <div class="empty-state-icon">üìù</div>
        <h3>Nenhuma transa√ß√£o encontrada</h3>
        <p>Adicione sua primeira transa√ß√£o ou ajuste os filtros</p>
        <button class="btn-primary" onclick="openTransactionModal()">
          <i>‚ûï</i> Nova Transa√ß√£o
        </button>
      </div>
    `;
    return;
  }
  
  container.innerHTML = transacoesFiltradas.map(transacao => `
    <div class="transaction-row">
      <div class="td-data">${formatDate(transacao.data_criacao)}</div>
      <div class="td-descricao">${transacao.descricao || 'Sem descri√ß√£o'}</div>
      <div class="td-categoria">${transacao.categoria?.nome || 'Sem categoria'}</div>
      <div class="td-tipo ${transacao.tipo_entrada}">
        <span>${transacao.tipo_entrada === 'entrada' ? 'üìà' : 'üìâ'}</span>
        ${transacao.tipo_entrada === 'entrada' ? 'Receita' : 'Despesa'}
      </div>
      <div class="td-valor ${transacao.tipo_entrada}">
        ${transacao.tipo_entrada === 'entrada' ? '+' : '-'} ${formatCurrency(transacao.valor)}
      </div>
      <div class="td-acoes">
        <button class="btn-action btn-edit" onclick="editarTransacao(${transacao.id})" title="Editar">
          ‚úèÔ∏è
        </button>
        <button class="btn-action btn-delete" onclick="confirmarExclusao(${transacao.id})" title="Excluir">
          üóëÔ∏è
        </button>
      </div>
    </div>
  `).join('');
}

function showLoading(show) {
  const loading = document.getElementById('loading-transactions');
  const container = document.getElementById('transactions-list');
  
  if (loading) {
    loading.classList.toggle('show', show);
  }
  if (container) {
    container.style.display = show ? 'none' : 'block';
  }
}

// ===== MODAL =====

function openTransactionModal() {
  editandoTransacao = null;
  document.getElementById('modal-title').textContent = 'Nova Transa√ß√£o';
  document.getElementById('transaction-form').reset();
  document.getElementById('transaction-id').value = '';
  
  // Definir data atual como padr√£o
  const hoje = new Date().toISOString().split('T')[0];
  document.getElementById('data_criacao').value = hoje;
  
  clearFormErrors();
  showModal(true);
}

function closeTransactionModal() {
  showModal(false);
  setTimeout(() => {
    document.getElementById('transaction-form').reset();
    clearFormErrors();
    editandoTransacao = null;
  }, 300);
}

function showModal(show) {
  const modal = document.getElementById('transaction-modal');
  if (modal) {
    modal.classList.toggle('show', show);
  }
}

// ===== CRUD OPERATIONS =====

async function salvarTransacao(formData) {
  try {
    const transacaoData = {
      descricao: formData.get('descricao').trim(),
      valor: parseFloat(formData.get('valor')),
      tipo_entrada: formData.get('tipo_entrada'),
      categoria_id: parseInt(formData.get('categoria_id')),
      data_criacao: formData.get('data_criacao')
    };
    
    let response;
    if (editandoTransacao) {
      response = await api.updateTransacao(editandoTransacao.id, transacaoData);
      showNotification('Transa√ß√£o atualizada com sucesso!', 'success');
    } else {
      response = await api.createTransacao(transacaoData);
      showNotification('Transa√ß√£o criada com sucesso!', 'success');
    }
    
    // Recarregar dados
    const usuarioId = getCurrentUser()?.id || 1;
    await carregarTransacoes(usuarioId);
    
    closeTransactionModal();
  } catch (error) {
    console.error('‚ùå Erro ao salvar transa√ß√£o:', error);
    showNotification(error.message || 'Erro ao salvar transa√ß√£o', 'error');
  }
}

async function editarTransacao(id) {
  const transacao = todasTransacoes.find(t => t.id === id);
  if (!transacao) return;
  
  editandoTransacao = transacao;
  document.getElementById('modal-title').textContent = 'Editar Transa√ß√£o';
  
  // Preencher formul√°rio
  document.getElementById('transaction-id').value = transacao.id;
  document.getElementById('descricao').value = transacao.descricao || '';
  document.getElementById('valor').value = transacao.valor;
  document.getElementById('tipo_entrada').value = transacao.tipo_entrada;
  document.getElementById('categoria_id').value = transacao.categoria_id || '';
  
  // Formatar data para input date
  const data = new Date(transacao.data_criacao);
  document.getElementById('data_criacao').value = data.toISOString().split('T')[0];
  
  clearFormErrors();
  showModal(true);
}

async function confirmarExclusao(id) {
  const transacao = todasTransacoes.find(t => t.id === id);
  if (!transacao) return;
  
  const confirmacao = confirm(
    `Tem certeza que deseja excluir a transa√ß√£o "${transacao.descricao || 'Sem descri√ß√£o'}"?\n\nEsta a√ß√£o n√£o pode ser desfeita.`
  );
  
  if (confirmacao) {
    await excluirTransacao(id);
  }
}

async function excluirTransacao(id) {
  try {
    await api.deleteTransacao(id);
    showNotification('Transa√ß√£o exclu√≠da com sucesso!', 'success');
    
    // Recarregar dados
    const usuarioId = getCurrentUser()?.id || 1;
    await carregarTransacoes(usuarioId);
  } catch (error) {
    console.error('‚ùå Erro ao excluir transa√ß√£o:', error);
    showNotification(error.message || 'Erro ao excluir transa√ß√£o', 'error');
  }
}

// ===== FILTROS =====

function aplicarFiltros() {
  const filtroTipo = document.getElementById('filter-tipo').value;
  const filtroCategoria = document.getElementById('filter-categoria').value;
  const dataInicio = document.getElementById('filter-data-inicio').value;
  const dataFim = document.getElementById('filter-data-fim').value;
  
  transacoesFiltradas = todasTransacoes.filter(transacao => {
    // Filtro por tipo
    if (filtroTipo && transacao.tipo_entrada !== filtroTipo) {
      return false;
    }
    
    // Filtro por categoria
    if (filtroCategoria && transacao.categoria_id != filtroCategoria) {
      return false;
    }
    
    // Filtro por data
    const dataTransacao = new Date(transacao.data_criacao);
    
    if (dataInicio) {
      const inicio = new Date(dataInicio);
      if (dataTransacao < inicio) return false;
    }
    
    if (dataFim) {
      const fim = new Date(dataFim);
      fim.setHours(23, 59, 59, 999); // Final do dia
      if (dataTransacao > fim) return false;
    }
    
    return true;
  });
  
  atualizarInterface();
  showNotification(`${transacoesFiltradas.length} transa√ß√£o(√µes) encontrada(s)`, 'info', 2000);
}

function limparFiltros() {
  document.getElementById('filter-tipo').value = '';
  document.getElementById('filter-categoria').value = '';
  document.getElementById('filter-data-inicio').value = '';
  document.getElementById('filter-data-fim').value = '';
  
  transacoesFiltradas = [...todasTransacoes];
  atualizarInterface();
  showNotification('Filtros limpos', 'info', 2000);
}

// ===== EVENT LISTENERS =====

function setupEventListeners() {
  // Form de transa√ß√£o
  const form = document.getElementById('transaction-form');
  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (validarFormulario()) {
        setLoadingState('save-transaction-btn', true);
        try {
          const formData = new FormData(form);
          await salvarTransacao(formData);
        } finally {
          setLoadingState('save-transaction-btn', false);
        }
      }
    });
  }
  
  // Fechar modal ao clicar fora
  const modal = document.getElementById('transaction-modal');
  if (modal) {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeTransactionModal();
      }
    });
  }
  
  // Tecla ESC para fechar modal
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeTransactionModal();
    }
  });
}

// ===== VALIDA√á√ÉO =====

function validarFormulario() {
  clearFormErrors();
  let isValid = true;
  
  const descricao = document.getElementById('descricao').value.trim();
  const valor = document.getElementById('valor').value;
  const tipo = document.getElementById('tipo_entrada').value;
  const categoria = document.getElementById('categoria_id').value;
  const data = document.getElementById('data_criacao').value;
  
  if (!descricao) {
    showFieldError('descricao', 'Descri√ß√£o √© obrigat√≥ria');
    isValid = false;
  }
  
  if (!valor || valor <= 0) {
    showFieldError('valor', 'Valor deve ser maior que zero');
    isValid = false;
  }
  
  if (!tipo) {
    showFieldError('tipo_entrada', 'Tipo √© obrigat√≥rio');
    isValid = false;
  }
  
  // Categoria agora √© opcional
  // if (!categoria) {
  //   showFieldError('categoria_id', 'Categoria √© obrigat√≥ria');
  //   isValid = false;
  // }
  
  if (!data) {
    showFieldError('data_criacao', 'Data √© obrigat√≥ria');
    isValid = false;
  }
  
  return isValid;
}

function showFieldError(fieldName, message) {
  const field = document.getElementById(fieldName);
  const errorElement = document.getElementById(`${fieldName}-error`);
  
  if (field) field.classList.add('error');
  if (errorElement) {
    errorElement.textContent = message;
    errorElement.classList.add('show');
  }
}

function clearFormErrors() {
  document.querySelectorAll('.form-group input, .form-group select').forEach(input => {
    input.classList.remove('error');
  });
  document.querySelectorAll('.error-message').forEach(error => {
    error.classList.remove('show');
    error.textContent = '';
  });
}

// ===== EXPORTAR =====

function exportarTransacoes() {
  if (transacoesFiltradas.length === 0) {
    showNotification('Nenhuma transa√ß√£o para exportar', 'warning');
    return;
  }
  
  // Implementar exporta√ß√£o CSV
  const csv = gerarCSV(transacoesFiltradas);
  downloadCSV(csv, 'transacoes.csv');
  showNotification('Transa√ß√µes exportadas com sucesso!', 'success');
}

function gerarCSV(transacoes) {
  const headers = ['Data', 'Descri√ß√£o', 'Categoria', 'Tipo', 'Valor'];
  const rows = transacoes.map(t => [
    formatDate(t.data_criacao),
    t.descricao || '',
    t.categoria?.nome || '',
    t.tipo_entrada === 'entrada' ? 'Receita' : 'Despesa',
    t.valor
  ]);
  
  return [headers, ...rows].map(row => 
    row.map(field => `"${field}"`).join(',')
  ).join('\n');
}

function downloadCSV(csv, filename) {
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// ===== UTILIT√ÅRIOS =====

function updateElement(id, text) {
  const element = document.getElementById(id);
  if (element) element.textContent = text;
}

function setLoadingState(buttonId, loading) {
  const button = document.getElementById(buttonId);
  if (!button) return;
  
  if (loading) {
    button.classList.add('loading');
    button.disabled = true;
  } else {
    button.classList.remove('loading');
    button.disabled = false;
  }
}

console.log('üìù transacoes.js carregado!');